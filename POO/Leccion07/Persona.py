class Persona:
    # atributo de nivel de la clase
    # miAtributo = ''
    # para agregar caracteristicas o atributos a una clase necesitamos usar un metodo, en este caso el metodo llamado init(o constructor), este metodo se conoce como un metodo inicializador, es similar a un constructor sin embargo en python el constructor realmente esta oculto y se manda a llamar directamente por el lenguaje, asi que el metodo init es llamado por el lenguaje de python pero para poder inicializar los objetos en python vamos a depender de este metodo init, asi que este metodo init nos va a permitir agregar tanto atributos a nuestra clase y tambien para aprovechar e inicializar estos atributos
    def __init__(self): # como vemos el metodo constructor(aunque no es realmente ya que en python el real esta oculto pero podemos usar este) tenemos que definirlo como una funcion usando def y usamos dos veces _ al principio y despues la palabra init y al final otros dos _ ademas abrimos parentesis y dentro de este colocamos como parametro la palabra self que hace referencia de si mismo ya que este parametro es una referencia al objeto que se va a crear igual esto lo veremos mas adelantes pero basicamente cuando creemos un objeto se va a pasar una referenfcia de ese objeto hacia este metodo init para poder terminar de crear correctamente ese objeto, ademas del self podemos agregar otros parametros y despues cerramos con parentesis y colocamos dos puntos para abrir el metodo
    # este metodo init como tiene doble guion al inicio y al final, es un metodo especial cuando estamos trabajando con clases y debido a que tiene doble guin bajo en ingles s ele conoce como doble underscore o resumido dunder, asi que en este caso le podemos decidr metodo dunder init o simplemente metodo init, cuando estamos trabajando con clases veremos mas tipos de metodos con doble guion tanto al inicio y al final
        self.nombre = 'Juan'  # en otros lenguajes podemos colcoar atributos a nivel de la clase, pero esto lo vamos a ver mas adelante pero en este momento vamos a ver atributos que tienen que ver con nuestros objetos a estos atributos se le va a conocer como atributos de instancia y para ello usamos la palabra reservada self y anidado colocamos el nombre del atributo que le queremos colocar y asignarle un valor asi como se ve en el codigo
        self.apellido = 'Perez' # recuerda self hace referencia al objeto que vamos a crear por eso estos atributos se llaman a atributos de objetos
        self.edad = 28 # un tipo a tener en cuenta es que no es comun asignar valores por default a los atributos, mas adelante veremos como hacerlo con parametros del metodo __init__
        # normalmente pasamos por el init valores para inicializar los atributos de objetos pero por el ejemplo se quedara asi

    # otro metodo dunder que usaremos mas adelante es el metodo __str__ o repr, esto lo veremos mas adelante, simplemente es para que conozcamos estas sintaxis y nos vayamos acostumbrando a el doble guion
    #def __str__(self):
        #pass
    #def __repr__(self):
        #pass

print(type(Persona)) # como vemos utilizamos el tipo de dato de la clase persona pero a futuro podemos crear objetos con la clase Persona o tambien podemos trabajar con la clase en si misma de en vez de trabajar con objetos de esta clase pero esto lo vamos a ver mas adelante

persona1 = Persona() # para instanciar un objeto de la clase persona simplemente colocamos el nombre de la clase y parentesis que seria la clase como metodo pero recuerda que este metodo lo que hace realmente es llamar el constructor real de la clase en este caso la clase Persona y al hacer esto como vemos no necesitamos pasar como parametro self por que python automaticamente pasa ese parametro que es la referencia de este objeto y ademas llamara y pasara este parametro a el metodo init indirectamente (aunque no sea el constructor real ya que Persona() es el consturctor real ya que python lo llama automaticamente al usar este metodo y al iniciar ese metodo consturctor invicible llama automaticamente al init indrectamente por este medio tambien podemos pasarle parametros al metodo init), asi estamos creando un objeto, al hacer esto como init tiene como parametro self lo que hace es pasar la misma referencia de este objeto al init por medio del self, asi que la variable self esta apuntando al objeto que se va a crear en este momento en esta linea 20, por eso al usar self y despues punto y posteriormenten el nombre de la varaible lo que hace es agregar de manera automatica esos atributos a nuestra clase por medio de la palabra self que es el objeto que esta apuntando en estos momentos y asi los atributos pasan a ser atributos del objeto, al final una vez creado nuestro objeto gracias al metodo constructor e init se asigna esta referencia del objeto que hemos creado a la variable que en este caso llamamos persona1 (a esto se le llama instanciacion)
print(persona1.nombre) # si queremos utilizar alguno de los atributos simplemente usamos la variable que apunta al objeto y con punto posteriormente el nombre del atributo que queremos acceder
print(persona1.apellido)
print(persona1.edad)